name: Daily AI Developer Video Upload

on:
  schedule:
    - cron: '0 8 * * *'  # Runs every day at 8 AM UTC
  workflow_dispatch:

jobs:
  ai-video-upload:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout 
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Dependencies
        run: |
          sudo apt update
          sudo apt install -y ffmpeg jq wget imagemagick
          pip install TTS requests flask google-generativeai

      - name: Generate Video(s) and Upload to YouTube
        env:
          PIXABAY_API_KEY: ${{ secrets.PIXABAY_API_KEY }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          YT_CLIENT_ID: ${{ secrets.YT_CLIENT_ID }}
          YT_CLIENT_SECRET: ${{ secrets.YT_CLIENT_SECRET }}
          YT_REFRESH_TOKEN: ${{ secrets.YT_REFRESH_TOKEN }}
        run: |
          mkdir -p output
          i=0
          while IFS= read -r topic || [ -n "$topic" ]; do
            echo "üîπ Processing topic: $topic"

            python generate_with_gemini.py "$topic"

            tts --text "$(cat script.txt)" \
                --model_name tts_models/en/ljspeech/tacotron2-DDC \
                --out_path output/audio_$i.wav

            query=$(echo "$topic" | tr ' ' '+')
            curl -s "https://pixabay.com/api/?key=$PIXABAY_API_KEY&q=$query&image_type=photo&per_page=3" > image_results.json
            IMAGE_URL=$(jq -r '.hits[0].largeImageURL' image_results.json)
            wget "$IMAGE_URL" -O output/image_$i.jpg

            # Generate subtitle
            printf "1\n00:00:00,000 --> 00:00:10,000\n$topic\n" > output/subtitles_$i.srt

            # Generate horizontal video
            ffmpeg -loop 1 -i output/image_$i.jpg -i output/audio_$i.wav \
              -vf "scale=1280:720,subtitles=output/subtitles_$i.srt" \
              -c:v libx264 -tune stillimage -pix_fmt yuv420p -shortest \
              -y output/video_full_$i.mp4

            # Generate vertical shorts video
            ffmpeg -loop 1 -i output/image_$i.jpg -i output/audio_$i.wav \
              -vf "scale=720:1280,subtitles=output/subtitles_$i.srt" \
              -c:v libx264 -tune stillimage -pix_fmt yuv420p -shortest \
              -y output/video_short_$i.mp4

            # Generate thumbnail with text overlay
            convert output/image_$i.jpg -resize 1280x720 \
              -gravity center -fill white -undercolor '#00000080' -pointsize 48 -annotate +0+0 "AI Tip: $topic" \
              output/thumbnail_$i.jpg

            # Prepare metadata
            echo "$topic" > title.txt
            echo "Learn about $topic from a developer's perspective using AI tools like Gemini." > description.txt
            echo "AI,Gemini,coding,developer tools,YouTube automation,$(echo $topic | tr ' ' ',')" > tags.txt

            # Upload full video
            echo "‚è´ Uploading full video..."
            curl -X POST "https://www.googleapis.com/upload/youtube/v3/videos?part=snippet,status" \
              -H "Authorization: Bearer $YT_REFRESH_TOKEN" \
              -F "snippet.title=$(cat title.txt)" \
              -F "snippet.description=$(cat description.txt)" \
              -F "snippet.tags=$(cat tags.txt)" \
              -F "snippet.thumbnails.default.url=@output/thumbnail_$i.jpg;type=image/jpeg" \
              -F "status.privacyStatus=public" \
              -F "video=@output/video_full_$i.mp4"

            # Upload short video
            echo "‚è´ Uploading short video..."
            curl -X POST "https://www.googleapis.com/upload/youtube/v3/videos?part=snippet,status" \
              -H "Authorization: Bearer $YT_REFRESH_TOKEN" \
              -F "snippet.title=$(cat title.txt) #shorts" \
              -F "snippet.description=$(cat description.txt)\n#shorts" \
              -F "snippet.tags=$(cat tags.txt),shorts" \
              -F "snippet.thumbnails.default.url=@output/thumbnail_$i.jpg;type=image/jpeg" \
              -F "status.privacyStatus=public" \
              -F "video=@output/video_short_$i.mp4"

            i=$((i+1))
          done < topics.txt
